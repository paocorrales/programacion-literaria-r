[
  {
    "objectID": "01_presentacion.html#hola",
    "href": "01_presentacion.html#hola",
    "title": "Programación literaria con R",
    "section": "Hola!",
    "text": "Hola!\n\n\nVivo en Buenos Aires, Argentina\nInvestigo en el área de Ciencias de la Atmósfera\nSoy profesora de la carrera de Ciencias de Datos en UNAB\nParticipo en muchas comunidades de práctica:\n\nRLadies\nRForwards\nROpenSci\nThe Carpentries\n\n@paobcorrales\npaocorrales.github.io\n\n\n\n\n\n\n@paobcorrales\npaocorrales.github.io\n\n\n@paobcorrales\npaocorrales.github.io"
  },
  {
    "objectID": "01_presentacion.html#logística",
    "href": "01_presentacion.html#logística",
    "title": "Programación literaria con R",
    "section": "Logística",
    "text": "Logística\n\n\nLunes, Martes y Jueves de 10:45 a 12:15\nSesiones prácticas y de demostración\nMiniproyecto transversal (optativo)\nSus preguntas y comentarios son bienvenidos!\n\n\n\nMateriales abiertos (Licencia CCBY 4.0): paocorrales.github.io/programacion-literaria-r/"
  },
  {
    "objectID": "01_presentacion.html#programación-literaria",
    "href": "01_presentacion.html#programación-literaria",
    "title": "Programación literaria con R",
    "section": "Programación literaria",
    "text": "Programación literaria\n\n1970: Escribir programas en lenguaje humano. Las herramientas de programación se encargan de separar el programa (para compilar y ejecutar) de su documentación.\nDesde hace algunos años:\nAplicamos este concepto al análisis de datos.\nCódigo que lee, explora, visualiza, modela los datos y prosa (el analisis, hipótesis, conclusiones) se incluyen en el mismo archivo.\n\nEl código y prosa se tejen en el documento final."
  },
  {
    "objectID": "01_presentacion.html#mi-invitación-para-ustedes",
    "href": "01_presentacion.html#mi-invitación-para-ustedes",
    "title": "Programación literaria con R",
    "section": "Mi invitación para ustedes:",
    "text": "Mi invitación para ustedes:\n\nUtilizar RMarkdown/Quarto para generar informes o documentos reproducibles\n\nExplorar los distintos formatos: pdf, html, docx\nGenerar proyectos para trabajar de manera ordenada\n\nAutomatizar informes para ahorrar tiempo y cometer menos errores\nGenerar trabajos para revistas científicas\nPublicar informes o trabajos en una web para compartir"
  },
  {
    "objectID": "02_reportes.html",
    "href": "02_reportes.html",
    "title": "Reportes reproducibles",
    "section": "",
    "text": "Es posible que en tu trabajo tengas que presentar informes o resultados de tu análisis de datos. Tal vez te hayas encontrando guardando una y otra vez gráficos y tablas o copiando resultados de un archivo al otro hasta que el informe quedó como querías. Los archivos y el paquete RMarkdown o desde hace poco Quarto vienen al rescate.\nPara generar el archivo de salida, el paquete knitr (que viene de tejer en inglés) ejecutará el código en una sesión independiente de R e interpretará el texto, su formato y cualquier otra cosa que agreguemos (por ejemplo imágenes o links externos). Esto significa que nuestro archivo debe tener todo lo necesario para generar el análisis y si nos olvidamos de algo va a dar error.\nPor esta razón es recomendable knitear o renderizar el archivo seguido, para encontrarnos con los errores a tiempo y de paso asegurarnos que el análisis es reproducible."
  },
  {
    "objectID": "02_reportes.html#estructura-de-un-.rmd",
    "href": "02_reportes.html#estructura-de-un-.rmd",
    "title": "Reportes reproducibles",
    "section": "Estructura de un .Rmd",
    "text": "Estructura de un .Rmd\nCualquier archivo de este tipo tiene 3 partes principales:\n\nEl encabezado o yaml que determina que pinta tendrá el archivo de salida, por ejemplo en formato html. También se puede incluir información sobre el autor, la fecha, si queremos o no una tabla de contenidos y muchas cosas más. Hay pequeñas diferencias entre R Markdown y Quarto.\nEl texto o prosa ya que puede estar a lo largo de todo el documento. Para darle formato a los títulos o por ejemplo resaltar parte del texto usando negrita se usa Markdown, un lenguaje que a diferencia de html es legible aún si no está compilado o en su versión final.\nEl código en bloques o chuncks. Dentro de un chunk el código de R puede ejecutarse al igual que en un script normal y cualquier comentario o explicación debe tener al principio un # para que R lo interprete correctamente."
  },
  {
    "objectID": "03_sintaxis.html",
    "href": "03_sintaxis.html",
    "title": "Sintaxis en un reporte",
    "section": "",
    "text": "Ahora vamos a ver como se trabaja en cada una de las secciones de un reporte. Cada una tiene una sintaxis distinta, parece mucho, pero veremos que no se aleja de lo que cada uno ya sabe."
  },
  {
    "objectID": "03_sintaxis.html#encabezado",
    "href": "03_sintaxis.html#encabezado",
    "title": "Sintaxis en un reporte",
    "section": "Encabezado",
    "text": "Encabezado\nEl encabezado es una serie de instrucciones organizadas entre tres guiones (---) que determinan las propiedades globales del documento, como el título, el formato de salida, información de autoría, etc… También ahí se pueden cambiar opciones asociadas al formato de salida, como el estilo de la tabla de contenidos o índice.\nÉstas propiedades se definen en un formato llamado YAML, el cual permite definir listas jerarquizadas de una forma humanamente legible. Por ejemplo:\n\nRMarkdownQuarto\n\n\n---\ntitle: \"Mi primer RMarkdown\"\noutput: \n  html_document:\n    code_download: true\n    toc: true\n    toc_float: false\n---\ndefine dos variables principales, “title” y “output”. “Output” a su vez contiene un elemento “htm_document”, el cual contiene tres elementos: “code_download”, “toc” y “toc_float”.\n\n\n---\ntitle: \"Mi primer RMarkdown\"\nformat:\n  html:\n    code-tools: true\ntoc: true\n---\ndefine dos variables principales, “title” y “format”. “format” a su vez contiene un elemento “html” que define el formato de salida y contiene una nueva opción: “code-tools: true”. Esto permite visualizar el código fuente que genera la web cuando ya está publicada. “toc : true” generará una tabla de contenidos.\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nEs muy importante mantener el escalonado, o identación de los elementos, ya que ésta define la jerarquía de cada elemento. Muchos de los errores a la hora de knitear ocurren porque el archivo tiene problemas en la identación del encabezado."
  },
  {
    "objectID": "03_sintaxis.html#bloques-de-código",
    "href": "03_sintaxis.html#bloques-de-código",
    "title": "Sintaxis en un reporte",
    "section": "Bloques de código",
    "text": "Bloques de código\nEl código de R que va a leer datos, analizarlos y generar figuras, tablas o números se organiza en bloques (o chunks) delimitados por tres acentos graves (```) y se diferencia del resto de archivo con un fondo gris. Todo lo que incluyas entre estos delimitadores será interpretado por R como código e intentará ejecutarlo al knitear el archivo. Cualquier resultado del código (gráficos, tablas, texto, etc…) será insertado en el documento final en el mismo orden que están en el archivo R Markdown.\n\n\n\n\n\n\nInstrucciones\n\n\n\nPara insertar un nuevo chunk podés:\n\nUsar el botón Insert\nEl atajo de teclado Ctrl+Alt+I\nEscribir a mano!\n\n\n\nEl código en cada bloque se ejecuta como si fuera ejecutado en la terminal y todo resultado se muestra en el documento (ya vamos a ver formas de controlar esto). Por ejemplo, este bloque de código\n```{r sumar}\n1 + 1\n```\nva a insertar esto en el documento de salida:\n[1] 2\n\n\n\n\n\n\nImportante\n\n\n\nEs muy importante no romper los límites de los bloques. Un problema común es accidentalmente eliminar un acento grave al final de un bloque de código y que luego el documento no knitee correctamente. Si al knitear te sale un error como “attempt to use zero-length variable name”, revisá bien que todos tus bloques de código estén correctamente definidos.\n\n\nLos bloques pueden tener nombre, lo cual es útil para identificar donde ocurren los errores al momento de knitear pero también para tener una pista de lo que hace el código que incluye.\nSi bien el código se corre cuando uno knitea, cuando estés escribiendo un informe es muy cómodo ir corriendo bloques individuales interactivamente como si fuera en la consola.\nPara correr una línea de código, tendrás que pararte sobre esa línea y apretar:\n\n\n\n\n\n\nInstrucciones\n\n\n\nCtrl+Enter\n\n\nPero también podés correr el código de todo el chunk con:\n\n\n\n\n\n\nInstrucciones\n\n\n\nCtrl+Shift+Enter\n\n\nLos resultados van a aparecer inmediatamente debajo del bloque.\n\n\n\n\n\n\nEjercicio\n\n\n\nTercer desafío: Sumá un chunk a tu archivo\nUsando el archivo con el que venís trabajando insertá un nuevo chunk y:\n\nCargá el paquete readr.\nCreá una variable que se llame variable_prueba y asignale un valor.\nMostrá ese valor.\nVolvé a knitear el archivo para ver el resultado\n\n\n\nFinalmente, es posible que te encuentres mencionando resultados en el texto, por ejemplo algo así como “el promedio de la variable estudiada es 3.45”. Y también es posible que ese valor cambie si utilizas una base de datos distinta o si luego generas un informe pero para un mes siguiente. Las chances de de que te olvides de actualizar ese “3.45” son super altas, por eso R Markdown también tiene la posibilidad de incorporar código en línea con el texto.\nSi tenés una una variable promedio que vale “3.45”:\n\npromedio <- \"3.45\"\n\nPara mencionarla en el texto entonces escribirías:\n\nel promedio de la variable estudiada es `r promedio`.\n\ny el resultado en el documento kniteado sería\n\nel promedio de la variable estudiada es 3.45.\n\nprueba: 3.45"
  },
  {
    "objectID": "03_sintaxis.html#el-texto-propio-del-documento.",
    "href": "03_sintaxis.html#el-texto-propio-del-documento.",
    "title": "Sintaxis en un reporte",
    "section": "El texto propio del documento.",
    "text": "El texto propio del documento.\nEste es el texto dirigido a las personas que van a leer el reporte. Incluirá una introducción, descripción de los datos y de los resultados; es lo que escribirías en el archivo de Word.\nA diferencia de Word, el formato del texto se define usando markdown, que es un lenguaje simple que permite indicar si un texto va en negrita, cursiva, es un título, etc…usando símbolos especiales dentro del texto.\n\nMarkdown\nMarkdown permite escribir en texto plano pero definiendo el formato usando símbolos. Por ejemplo podés resaltar con negrita usando dos asteriscos así: **negrita** o italizada con un asterisco de cada lado: *itálicas*.\nTambién podés hacer una lista de elementos utilizando asteriscos:\n* la negrita se consigue con dos asteriscos\n* la italizada con un asterisco\n* y para resaltar código se usa el acento grave `\no guiones medios:\n- la negrita se consigue con dos asteriscos\n- la italizada con un asterisco\n- y para resaltar código se usa el acento grave `\nAmbas listas se van a ver de esta manera:\n\nla negrita se consigue con dos asteriscos\nla italizada con un asterisco\ny para resaltar código se usa el acento grave `\n\nSi en realidad querés una lista numerada, simplemente comenzá el renglón un número y un punto. Podrías usar siempre el mismo número, markdown se encarga del resto:\n1. la negrita se consigue con dos asteriscos\n1. la italizada con un asterisco\n1. y para resaltar código se usa el acento grave `\nAhora la lista numerada se ve así:\n\nla negrita se consigue con dos asteriscos\nla italizada con un asterisco\ny para resaltar código se usa el acento grave `\n\nPodés agregar títulos con distinta jerarquía agregando # al comienzo. Esto además define secciones dentro del documento:\n# Título\n## El primer subtítulo\n### Otro subtítulo de menor jerarquía\n#### Otro más, y podría seguir!\nPodés escribir estos símbolos a mano o usando el Editor Visual de RStudio y cambiar de la versión código fuente a la versión visual según prefieras () . El Editor Visual permite dar formato al texto usando markdown sin saber usar markdown.\n\n\n\n\n\n\nEjercicio\n\n\n\nCuarto desafío: Agregale texto a tu archivo\nBorrá el contenido del archivo .Rmd que creaste (pero no el encabezado!) y probá escribir algo y darle formato. Luego volvé a apretar el botón knit para ver el resultado.\n\n\nMarkdown permite muchas otras cosas, por ejemplo:\n\nPodés agregar un link a una página externa: [texto que se muestra con el link](http://google.com). Resultado: texto que se muestra con el link\nPodés incluir una imagen: ![descripción de la figura](https://placekitten.com/200/100)\n\nResultado:\n\n\n\ndescripción de la figura\n\n\nY también podés agregar ecuaciones (usando LaTeX) en la misma línea (esto:$E = mc^2$ se ve así: \\(E = mc^2\\)) o en una línea propia. Esto:\n$$\ny = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon\n$$\nse ve así:\n\\[\ny = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon\n\\]\n\n\n\n\n\n\nInformación\n\n\n\nPodés revisar la guía rápida de Markdown desde RStudio (en inglés):\nHelp → Markdown Quick Reference"
  },
  {
    "objectID": "03_sintaxis.html#control-de-chunks",
    "href": "03_sintaxis.html#control-de-chunks",
    "title": "Sintaxis en un reporte",
    "section": "Control de chunks",
    "text": "Control de chunks\nPreviamente vimos que un chunk tiene una pinta como esta:\n```{r nombre-del-chunk}\n\n```\nPonerle nombre al chunk no es obligatorio pero está bueno para tener una idea de qué hace cada uno, lo cual se vuelve más importante a medida que un reporte se vuelve más largo y complejo. Pero lo que no dijimos es que además del nombre, se pueden agregar un montón de opciones que cambian el comportamiento y la apariencia del resultado del chunk.\n\nRMarkdownQuarto\n\n\nPara cambiar las opciones de un chunk, lo único que hay que hacer es listarlas dentro de los corchetes. Por ejemplo:\n```{r nombre-del-chunk, echo = FALSE, message = FALSE}\n\n```\n\n\nPara cambiar las opciones de un chunk, lo único que hay que hacer es listarlas como comentarios de quarto. Por ejemplo:\n```{r nombre-del-chunk}\n#| echo: false\n#| message: false\n\n```\n\n\n\nHay una serie de opciones particularmente importante es la que controla si el código se ejecuta y si el resultado del código se va a mostrar en el reporte o no:\n\neval = FALSE evita que se ejecute el código del chunk, de manera que tampoco va a mostrar resultados. Es útil para mostrar códigos de ejemplo si estás escribiendo, por ejemplo un documento para enseñar R.\necho = FALSE ejecuta el código del chunk y muestra los resultados, pero oculta el código en el reporte. Esto es útil para escribir reportes para personas que no necesitan ver el código de R que generó el gráfico o tabla que querés mostrar.\ninclude = FALSE corre el código pero oculta tanto el código como los resultados. Es útil para usar en chunks de configuración general donde, por ejemplo, cargas las librerías.\nmessage = FALSE el bloque de código no mostrará los posibles mensajes que genere.\nwarning = FALSE el bloque de código no mostrará los posibles warnings que genere.\n\nSi estás escribiendo un informe en el que no querés que se muestre ningún código, agregarle echo = FALSE a cada chunk nuevo se vuelve tedioso. La solución es cambiar la opción de forma global de manera que aplique a todos los chunks. Esto se hace mediante la función knitr::opts_chunk$set(), que setea las opciones globales de los chunks que le siguen. Si querés que todos los chunks tengan echo = TRUE crearías un chunk así:\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\nGeneralmente tiene sentido poner esto en el primer chunk de un documento, que como suele ser cuestiones de configuración del reporte, también conviene ponerle include = FALSE.\n\n\n\n\n\n\nInformación\n\n\n\nEn quarto, las opciones globales se agregan en el YAML:\n---\ntitle: \"Mi primer RMarkdown\"\nformat:\n  html:\n    code-tools: true\ntoc: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n---\nPero por supuesto, el documento puede tener un primer chunk setup que cargue las librerías y código útil para nuestro trabajo\n\n\nFinalmente, una opción tan poderosa como peligrosa es cache = TRUE. Lo que hace es que en vez de correr el código de un chunk cada vez que kniteás el documento, guarda el resultado del chunk en el disco para reutilizar la próxima vez que crees el reporte. Esto es muy cómo si en chunk tiene un código que tarda mucho en correr. Por ejemplo el siguiente chunk va a tardar 10 minutos en correr la primera vez que knitees el reporte, pero luego va a ser mucho más rápido:\n```{r cache = FALSE}\ndatos <- funcion_que_tarda_10_minutos(x)\n```\nknitr es bastante inteligente y va a invalidar la cache si cambiás el código del chunk. Pero, ¿qué pasa si cambiás algo del código previo que cambia el valor de x o incluso el funcionamiento de function_que_targa_10_minutos? Es posible que knitr no se de cuenta y use la cache, con el resultado de que datos va a tener un valor incorrecto. Hay formas de decirle a knitr de qué depende cada chunk y así obtener una cache más “inteligente” pero es algo que se vuelve complicado muy rápido.\nEn resumen, es bueno usar la cache pero sólo cuando es imprescindible."
  },
  {
    "objectID": "04_proyectos.html",
    "href": "04_proyectos.html",
    "title": "Trabajando con proyectos",
    "section": "",
    "text": "Trabajar con proyectos de RStudio no solo hace tus análisis más ordenados y reproducibles, también hacen tu vida más simple.\nAl comienzo posiblemente tengas un script y uno o dos archivos con datos, pero es posible que rápidamente te encuentres con una docena de archivos con nombres parecidos pero que pertenecen a análisis totalmente distintos. Antes de que la cosa comience a complicarse te proponemos trabajar con proyectos."
  },
  {
    "objectID": "04_proyectos.html#qué-ventajas-tiene",
    "href": "04_proyectos.html#qué-ventajas-tiene",
    "title": "Trabajando con proyectos",
    "section": "¿Qué ventajas tiene?",
    "text": "¿Qué ventajas tiene?\n\nTe permite “cuidar” los datos que usas al ordenarnos en carpetas que diferencien entre la versión original o cruda y los datos limpios o los resultados finales.\nTe permite compartir tu trabajo fácilmente con otras personas. Solo tendrías que compartir la carpeta del proyecto sabiendo que incluye todo lo necesario para que cualquiera reproduzca tu análisis.\nTe permite publicar de manera ordenada tu código si vas a presentar o publicar tu trabajo.\nTe permite continuar con lo que estabas haciendo hace una semana o hace un mes como si el tiempo no hubiera pasado. De alguna manera es un regalo para tu yo futuro.\n\n\n\n\n\n\n\nEjercicio\n\n\n\nPrimer desafío: Crea un nuevo proyecto en RStudio\n\nHacé click en el menú “Archivo” (“File”) y luego en “Nuevo Proyecto” (“New Project”).\nHacé click en “Nueva Carpeta” (“New Directory”).\nHacé click en “Nuevo Proyecto” (“New Project”).\nEscribí el nombre de la carpeta que alojará a tu proyecto, por ejemplo “mi_proyecto”\nSi aparece (y sabés usarlo), seleccioná “Crear un repositorio de git” (“Create a git repository”).\nHacé click en “Crear Proyecto” (“Create Project”).\n\n\n\nSi todo salió bien, ahora deberías tener una nueva carpeta que se llama mi_proyecto. Pero si bien es una carpeta común y corriente, le llamamos proyecto porque además contiene un archivo con el mismo nombre mi_proyecto.Rproj (o solo mi_proyecto si en tu computadora no ves la extensión de los archivos)."
  },
  {
    "objectID": "04_proyectos.html#abrir-un-proyecto",
    "href": "04_proyectos.html#abrir-un-proyecto",
    "title": "Trabajando con proyectos",
    "section": "Abrir un proyecto",
    "text": "Abrir un proyecto\nLa manera más simple de abrir un proyecto es abriendo la carpeta que lo contiene y haciendo doble click sobre el archivo mi_proyecto.Rproj. Al hacer esto se abrirá RStudio y la sesión de R en la misma carpeta y, por defecto, cualquier archivo que quieras abrir o guardar lo hará en esa misma ubicación. Esto ayuda a mantener tu trabajo ordenado y que luego sea simple retomar o compartir lo que hiciste.\nRStudio permite tener varios proyectos abiertos, y esto es posible porque justamente cada proyecto tiene su propia carpeta. Si en algún momento trabajas con proyectos en paralelo vas a poder hacerlo sin que el código o los resultados de un análisis interfieran con otro.\n\n\n\n\n\n\nEjercicio\n\n\n\nSegundo desafío: Abrí tu nuevo proyecto desde el explorador de archivos\n\nCerrá RStudio\nDesde el explorador de archivos, buscá la carpeta donde creaste tu proyecto.\nHacé doble click en el archivo que tiene el nombre de tu proyecto (y que termina con .Rproj) que encontrarás en esa carpeta."
  },
  {
    "objectID": "04_proyectos.html#cómo-se-organiza",
    "href": "04_proyectos.html#cómo-se-organiza",
    "title": "Trabajando con proyectos",
    "section": "¿Cómo se organiza?",
    "text": "¿Cómo se organiza?\nNo existe una “mejor” forma de organizar un proyecto pero acá van algunos principios generales que nos hacen la vida más simple:\n\nTratar los datos como sólo de lectura Es posible que la toma de los datos que querés analizar te haya costado mucho trabajo, o te haya costado conseguirlos. Trabajar con datos de forma interactiva (por ejemplo, en Excel) tiene la ventaja de permitirte hacer algunos análisis rápidamente pero al mismo tiempo tiene la desventaja de que esos datos pueden ser modificados fácilmente. Esto significa que a veces no conozcas de la procedencia de los datos, o no recuerdes cómo los modificaste desde que los obtuviste. Por lo tanto, es una buena idea tratar los datos como “sólo de lectura” y nunca modificar los archivos originales.\nLimpieza de datos En muchos casos tus datos estarán “sucios”, necesitarán un preprocesamiento importante para organizarlos en un formato que R (o cualquier otro lenguaje de programación) pueda analizados fácilmente. Esta tarea se denomina a veces “amasado” o “masticado de datos”. Es una buena costumbre guardar el código que te permitió limpiar estos datos por si los volvieras a necesitar. También es recomendable guardar esa versión de los datos limpios, de “sólo lectura”, para que puedas usarlos en tu análisis sin necesidad de repetir cada vez todo el proceso de limpieza de los datos.\nTratar las salidas o resultados generados como descartables Cualquier resultado (gráficos, tablas, valores) debe poder repetirse o rehacerse a partir del código guardado. Si bien las pruebas rápidas para ver si el código funciona se pueden hacer en la consola, es importante guardar el código que genera los resultados y asegurarnos de que sean reproducibles. Aún mejor, si organizas esos resultados en distintas sub-carpetas, luego tendrás todo aún más ordenado.\n\nTeniendo esto en mente, la estructura interna de un proyecto podría ser la siguiente:\nmi_proyecto/\n│\n├── informe/\n│   ├── informe_1.Rmd   # Este es el documento principal\n│   └── referencias.bib # Lista de referencias\n│\n├── scripts/\n│   └── limpieza.R      # Scrips que se corren 1 vez o código secundario\n│\n├── figuras/            # Ubicación de las figuras generadas\n│\n└── datos/\n    ├── datos_crudos/   # Datos crudos (externos)\n    └── datos_derivados/# Datos generados en el análisis o limpieza\nPor supuesto, siempre dependerá del uso y necesidad de cada persona. Pero lo anterior es un buen punto de partida.\n\n\n\n\n\n\nEjercicio\n\n\n\nTercer desafío: Crea la estructura de carpetas\n\nCrea las carpetas utilizando el explorador de archivos o desde la pestaña Files de RStudio.\nSi tenés un reporte de prueba, podés ubicarlo en la carpeta informe."
  },
  {
    "objectID": "04_proyectos.html#ordenando-aún-más",
    "href": "04_proyectos.html#ordenando-aún-más",
    "title": "Trabajando con proyectos",
    "section": "Ordenando aún más",
    "text": "Ordenando aún más\nSi tenés alguna experiencia programando con R es posible que tengas estás lineas al comienzo de alguno de tus scripts o si nunca las usaste, seguro viste que alguien más lo hacia:\n\nsetwd(\"/Users/pao/una_carpeta/al/proyecto_importante\")\nrm(list = ls())\n\nLa primera línea setea o le avisa a R cual será la carpeta donde va a trabajar. Con el uso de proyectos esto está prácticamente solucionado porque al abrir el proyecto ya sea desde el explorador de archivos haciendo doble click en el archivo con extensión Rproj o desde RStudio, R sabrá que ese directorio será el de trabajo.\nPero también te dijimos que era una buena práctica organizar las diferentes partes del proyecto en subcarpetas, como por ejemplo colocar los datos en una subcarpeta llamada “datos”, los informes en otra y tal vez las figuras en una subcarpeta distinta dentro del proyecto. ¿Cómo hacemos para que R lea un archivo que no está en la carpeta de trabajo? Podríamos escribir el camino hacia ese archivo, por ejemplo \"datos/mi_archivo_de_datos.csv\" pero si queremos compartir el código a otra persona que tal vez tiene un sistema operativo distinto y usa la barra invertida \\ va a estar en problemas al intentar correr esa línea.\nPara solucionar estos problemas existe el paquete here, que funciona independientemente del sistema operativo. Su función principal here() recibe como argumentos el camino hacia el archivo que se quiere leer, siempre entre comillas y separados por comas, así:\n\nmis_datos <- read_csv(here(\"datos\", \"mi_archivo_de_datos.csv\"))\n\nInternamente este paquete puede identificar cual es el directorio de trabajo (por ejemplo detectando que hay un archivo .Rproj) y busca a partir de ahí la subcarpeta “datos” y adentro de ella el archivo “mi_archivo_de_datos.csv”.\nLa segunda línea del código inicial se usa para borrar los elementos que creamos en el análisis normalmente cuando cambiamos de tema o empezamos a trabajar con algo distinto. Esto está bien porque no queremos arrastrar análisis que hicimos en un proyecto a otro, necesitamos que sean autocontenidos y reproducibles. El problema es que este comando no borra los paquetes activados o las opciones usuario que hayamos seteado.\n\nBorrón y cuenta nueva… todos los días!\n¿Cómo nos aseguramos de que el análisis sea realmente reproducible? Esta es una pregunta bastante amplia y hay muchas herramientas para resolver este problema. Por ahora nos vamos a concentrar en que al menos en tu computadora puedas repetir los cálculos o el análisis desde cero. Y además de organizar proyectos y no modificar los datos originales, ¿cómo podés asegurarte de que guardaste todo el código que estuviste escribiendo y usaste? La manera más directa es reiniciar la sesión de R y correr el código de nuevo, si da error o no devuelve lo que esperabas significa que te faltó guardar algún paso.\n\n\n\n\n\n\nInstrucciones\n\n\n\nTip: Podés reiniciar la sesión de R con el atajo Ctrl+Shif+F10\n\n\nEsto puede pasar si por ejemplo leés una base de datos en memoria pero no guardás el código que lo hace. Mientras estemos trabajando, R tendrá esa base de datos en memoria y podremos hacer cálculos y gráficos. Por defecto además RStudio va a recordar las variables que estés usando mañana o pasado en un archivo oculto (.RData) a menos que le indiques lo contrario. Y si bien suena práctico volver a R al otro día y tener el análisis tal cual lo dejamos, esto puede significar que nunca nos demos cuenta que nos faltó guardar una línea de código clave en nuestro análisis.\n\n\n\n\n\n\nEjercicio\n\n\n\nCuarto desafío: Configurá RStudio\n\nHacé click en el menú “Herramientas (”Tools”) y luego “Opciones globales” (“Global Options”).\nDestildá la opción “Recuperar .RData al inicio de la sesión” (“Restore .RData into workspace at startup”).\nHacé click en “Aplicar” (“Apply”)."
  },
  {
    "objectID": "05_trabajo.html",
    "href": "05_trabajo.html",
    "title": "Flujo de trabajo",
    "section": "",
    "text": "Esta temática podría ser tan larga y compleja como se quiera. Definir manera de trabajar es cuestión de práctica pero además del objetivo final que queremos alcanzar. En esta sección veremos algunas herramientras y discutiremos algunas ideas que buscan seguir avanzando en la generaciónde analísis y reportes reproducibles."
  },
  {
    "objectID": "05_trabajo.html#trabajando-con-funciones-y-otro-código",
    "href": "05_trabajo.html#trabajando-con-funciones-y-otro-código",
    "title": "Flujo de trabajo",
    "section": "Trabajando con funciones y otro código",
    "text": "Trabajando con funciones y otro código\nHasta ahora tenemos un proyecto con una determinada estructura de carpetas que nos permite ordenar nuestro trabajo. Además vimos en detalle como utilizar archivos .Rmd o .qmd autocontenidos, que incluyan el código y texto necesario para generar un análisis. Pero es posible que nuestro trabajo necesite funciones que generamos para hacer nuestro trabajo más simple. Si incluimos el código que define estas funciones en nuestro .Rmd, puede complejizar nuestro código y que sea más dificil de interpretar. Aquí podemos comenzar a incluir archivos secundarios que contengan estas funciones.\nEn las situaciones donde nuestro código no produce resultados, más bien son definiciones de funciones secundarias u otras herramientras, no tiene tanto sentido usar archivos .Rmd. En estos casos podemos volver a los tradicionales scripts.\nSi hipotéticamente quisieramos definir una función que convierte la temperatura en kelvin (algo muy común entre meteorólogos) a la temperatura en grados centígrados tendriamos el siguiente código:\n\nkelvin_a_centigrados <- function(temperatura) {\n  \n  return(temperatura - 273.15)\n  \n}\n\nque podríamos guardar en un script de R que se llame funciones_secundarias.R que por supuesto guardaremos en la carpeta “scripts”. Aquí podemos hacer un paréntesis para mencionar la necesidad de documentar apropiadamente cualquier función o código que generemos. Para una función deberíamos incluir:\n\nQué hace o cual es su propósito.\nQué argumentos requiere y de que tipo de datos son.\nQué genera cómo resultado.\n\n\n\n\n\n\n\nEjercicio\n\n\n\nPrimer desafío: Crea una función\n\nCreá un archivo .R con alguna función. Puede ser la que vimos como ejemplo o alguna otra que prefieras.\nGuardá el archivo en la carpeta scripts\n\n\n\nAhora el desafío es lograr usar esa función que está en un archivo .R en el reporte .Rmd. Necesitamos cargar el script al comienzo de nuestro archivo para que la función quede disponible para ser utilizada más adelante.\nEl mejor lugar para hacer esto es, en el caso de R Markdown, el bloque de código setup donde además cargamos las librerías que usaremos. Por ejemplo:\nlibrary(ggplo2)\nlibrary(data.table)\nsource(here::here(\"scripts/funciones_secundarias.R\"))\n\n\n\n\n\n\nEjercicio\n\n\n\nSegundo desafío: Carga la función\n\nAgrega source(here::here(\"scripts/funciones_secundarias.R\")) al comienzo del archivo .Rmd\nUsa la función en algún bloque de código\nKnitea el archivo para ver el resultado final"
  },
  {
    "objectID": "05_trabajo.html#trabajando-con-datos",
    "href": "05_trabajo.html#trabajando-con-datos",
    "title": "Flujo de trabajo",
    "section": "Trabajando con datos",
    "text": "Trabajando con datos\nMuchas veces los datos están disponibles en distintos servicios en páginas de internet. Muchos gobiernos por ejemplo, tienen portales de datos abiertos. Organizaciones generan APIs para poner a disposición sus datos o tal vez otras personas publicaron sus datos en servicios como Zenodo y queremos aprovecharlos. Es posible que se puedan decargar los datos visitando la web y haciendo click en un botón, sin embargo podríamos escribir el código necesario para hacer esto de manera programática. Esto hace que nuestro trabajo sea más reproducible y disminuye las chances de error.\nEl código que genera la descarga de datos podría estar incluido en el archivo .Rmd si la descarga no demora. En general querremos incluir la opción de no descargar los datos si el código encuentra que ya fueron descargados previamente. También podríamos generar un script de descarga de datos que corra una sola vez. Esta es una buena idea cuando el código de descarga demora o es complejo.\nVeamos un ejemplo de descarga de datos desde Zenodo.\nSi revisamos la base de datos https://sandbox.zenodo.org/record/1029654 veremos que incluye un solo archivo en formato .csv.\n\n\n\n\n\nVemos también el botón “Download” para la descarga del archivo. Podríamos usarlo para descargar el archivo haciendo click.\nPero como mencionaba previamente, se puede escribir el código necesario para hacer la descarga de manera programática y asegurarnos que tenemos los datos correctos. Podríamos crear una función descarga_pinguinos():\n\ndescarga_pinguinos <- function() {\n  file <- here::here(\"datos/datos_crudos/penguins.csv\")\n  url <- \"https://sandbox.zenodo.org/record/1029654/files/penguins.csv?download=1\"\n  download.file(url, file)\n}\n\nPara obtener la dirección url del archivo, hay que hacer click derecho sobre el botón Download y copiar el link.\nAhora si deseas descargar los datos solo hay que llamar a la función descarga_pinguinos() y los datos se guardaran en la carpeta correcta.\nPodríamos mejorar esto generando una función que solo descargue los datos en caso de que no estén presentes en el proyecto. Esta función podría escribirse de esta manera:\n\ndatos_pinguinos <- function() {\n  file <- here::here(\"datos/datos_crudos/penguins.csv\")\n  if (!file.exists(file)) {\n    download_penguins()\n  } \n  return(read.csv(file))\n}\n\nCon esta última función en nuestro archivo .Rmd nos podemos olvidar de la descarga de datos, que se hará automáticamente.\npenguins <- datos_pinguinos()\n\n\n\n\n\n\nEjercicio\n\n\n\nTercer desafío: descarga de datos programática\n\nSiguiendo los pasos anteriores, general las funciones necesarias para descargar los datos prográtiacamente en la carpeta correcta.\nLas funciones pueden estar al comienzo del archivo o puedes guardarlas en el script funciones_secundarias.R (o un nuevo script) y cargarlas al comienzo.\nPara revisar que todo funciona, knitea el archivo y chequea que los datos estén en la carpeta correcta."
  },
  {
    "objectID": "06_parametrizacion.html",
    "href": "06_parametrizacion.html",
    "title": "Reportes Parametrizados",
    "section": "",
    "text": "Para generar un informe parametrizado hay que añadir un elemento llamado params a la cabecera con la lista de parámetros y sus valores por defecto.\nparams:\n  especie: Papúa\nA partir de ahora, tendrás acceso a una variable llamada params que es una lista que contiene los parámetros y su valor. Para acceder al valor de cada parámetro se utiliza el operador $ de la siguiente manera:\n\nparams$especie\n\n[1] \"Papúa\"\n\n\nDe este modo, el código original puede modificarse para utilizar el valor de la especie almacenada en params$especie.\n\npinguinos %>% \n  filter(especie == params$especie) %>% \n  ggplot(aes(x = largo_pico_mm, y = alto_pico_mm)) +\n  geom_point(color = \"darkorange\",\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"darkorange\") +\n  theme_minimal() +\n  labs(title = \"Dimensiones del pingüino\",\n       subtitle = paste(\"Longitud y profundidad para los pingüinos\", params$especie, \"en Palmer Station LTER\"),\n       x = \"Largo del pico (mm)\",\n       y = \"Alto del pico (mm)\",\n       color = \"Especie de Pingüino\") \n\nAquí cambiamos el subtítulo para concatenar palabras con el valor almacenado en params$especie, de esta manera podemos construir el subtítulo de forma programática.\n\n\n\n\n\n\nEjercicio\n\n\n\nPrimer desafío: parametrizá el reporte de ejemplo\n\nAgregá la opcion params en el yaml y asignale \"Papúa\".\nRevisá el código y modificalo para que ahora use params$especie en vez de la mención explicita a la especie. En algunos casos necesitaras utilizar la función paste0() para concatenar texto.\nAhora revisá el texto, podés reemplazar la mención de la especie con Papúa entre acentos para que al renderizar aparezca el nombre de la especie.\nRenderizá el documento y revisá que todo funcione.\n\n\n\nAhora el informe está listo para funcionar como un informe parametrizado.\n\n\n\n\n\n\nEjercicio\n\n\n\nSegundo desafío: parametrizá el reporte de ejemplo\nCambia “Papúa” en el yaml para generar un nuevo informe para una de las otras especies. Renderizá el documento para ver el resultado\n\n\nTambién sería posible renderizar el archivo desde la consola, sumando el parámetro deseado, sin tener que modificar encabezado cada vez.\n    rmarkdown::render(\"rmarkdown_reporte_ejemplo.Rmd\", params = list(\n      especie = \"Adelia\"\n    ))\nMejor aún si necesitas renderizar el mismo reporte con distintos parámetros, es crear una función:\nrenderiza reporte <- function(especie) {\n  rmarkdown::render(\n    \"rmarkdown_reporte_ejemplo\", params = list(\n      especie = \"Adelia\"\n    ),\n    output_file = paste0(\"reporte-\", especie, \".pdf\")\n  )\n}\nGenerar una función como esta luego permitirá iterar sobre distintos parámetro usando un loop o el paquete purrr."
  },
  {
    "objectID": "07_plantillas.html",
    "href": "07_plantillas.html",
    "title": "Usando plantillas",
    "section": "",
    "text": "En este punto R Markdown y Quarto se separan un poquito. Si trabajamos con RMarkdwon podemos usar el paquete rticles que contiene una buena cantidad de de plantillas de revistas científicas (muchas de ellas contribuidas por la comunidad). Quarto es una herramienta nueva, tiene apenas unos meses de vida (al menos desde que fue presentada) y la funcionalidad análoga apenas está creciendo.\nPor esa razón si decidieras usar Quarto para escribir un paper científico, es posible que no encuentres la plantillas que necesitas. Podrías hacer el trabajo para adaptar la plantilla que provee la revista y contribuir al desarrollo del paquete pero lleva su trabajo."
  },
  {
    "objectID": "07_plantillas.html#más-allá-de-rticles-y",
    "href": "07_plantillas.html#más-allá-de-rticles-y",
    "title": "Usando plantillas",
    "section": "Más allá de rticles y …",
    "text": "Más allá de rticles y …\nPero ¿que pasa cuando estos paquetes no tienen la plantillas que necesitás? Normalmente, las revistas proveen una plantilla de LaTeX que podés usar y adaptar para trabajar con R Markdown o Quarto. Esto requiere cierto conocimiento de LaTeX y Pandoc templates, mucha paciencia y café/té/mate para lidiar con todos los posibles errores. El resultado vale la pena por supuesto. Sobre todo si luego contribuís esa plantilla para que otras personas se puedan beneficiar de ese esfuerzo.\nSi alguna vez te encontrás en esta situación podés probar realiza este ejercicio y seguir este video paso a paso (en inglés)."
  },
  {
    "objectID": "08_publicacion.html",
    "href": "08_publicacion.html",
    "title": "Publicando reportes",
    "section": "",
    "text": "Querés compartir tus resultados y tenés un archivo RMarkdown o Quarto en el que estuviste trabajando. Podrías compartir la carpeta del proyecto o un link a un repositorio pero sería ideal que cualquier persona pueda ver esos hermosos resultados sin necesidad de correr código. La otra alternativa es knitear el documento para compartir un PDF o archivo de Word. Las opciones no terminan ahí, Rmarkdown/Quarto abre un mundo de posibilidades para trabajar con código de R, texto y además compartir los resultados (y cualquier otra cosa!)."
  },
  {
    "objectID": "08_publicacion.html#sitio-web-de-una-sola-página",
    "href": "08_publicacion.html#sitio-web-de-una-sola-página",
    "title": "Publicando reportes",
    "section": "Sitio web de una sola página",
    "text": "Sitio web de una sola página\nSi sabés cómo generar un reporte en formato html usando R Markdown, ¡ya sabés todo lo que necesitás para publicar un sitio web simple! Lo único que hace falta es un servicio que hostee el archivo y lo muestre a los visitantes. Uno de ellos es Netlify, que permite crear un sitio web con sólo arrastrar una carpeta.\nPequeño detalle: seguramente tu reporte (tu archivo RMarkdown o de Quarto) tiene algún nombre descriptivo consistente con su contenido. Para que convertirlo en una página web el archivo tiene que tener un nombre especial: “index.html”. Adelante, nombrá a tu documento como index.Rmd y knitea a HTML como de costumbre.\nAhora deberías tener como resultado archivo llamado “index.html” en la carpeta de tu proyecto. ¡Felicitaciones! Creaste tu primer págna web.\n\nPublicación\nSolo falta publicar tu página web para no viva solo en tu computadora. Veamos como se hace en Netlify.\nEntrá a https://app.netlify.com/drop y arrastrar la carpeta en el recuadro. Netlify va a crear una página web con un nombre aleatorio y posiblemente imposible de deletrear, pero está publicada!\n\nTal vez notaste que Netlify borra los sitios web luego de 24 horas. Para que tu sitio sea permanente tenés que crearte una cuenta en Netlify. Eso además te va a permitir cambiarle el nombre a tu página, por ejemplo migranweb.netlify.app\n\n\n¿Qué pinta tiene?\nAhora que cubrimos los principios básicos de como publicar la página web, podemos concentrarnos en lo importante, el aspecto! (y por supuesto el contenido :) ).\nLa pinta de cualquier archivo RMarkdown se controla desde el encabezado o YAML y en este caso vamos a modificar algunas opciones del output.\nEl YAML de esta web tiene la siguiente pinta:\n\nRMarkdownQuarto\n\n\n---\ntitle: \"Webs con RMarkdown\"\noutput: \n  html_document:\n    code_download: true\n    toc: true\n    toc_float: true\n    theme: unite                                                     \n---\nDe todo esto, la única opción nueva es theme que permite cambiar el aspecto general de la página (por ejemplo el color de los links y el tipo de letra) y hay varios que viene listos para usar en el paquete {rmarkdown}: default, cerulean, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, y yeti. Podés verlos en acción acá.\n\n\n\n---\ntitle: \"Mi primer RMarkdown\"\nformat:\n  html:\n    code-tools: true\n    theme: \n      - united\ntoc: true\n---\nDe todo esto, la única opción nueva es theme que permite cambiar el aspecto general de la página (por ejemplo el color de los links y el tipo de letra) y hay varios que viene listos para usar con Quarto: default, cerulean, cosmo, cyborg, darkly, flatly, journal, litera, lumen, lux, materia, minty, morph, pulse, quartz, sandstone, simplex, sketchy, slate, solar, spacelab, superhero, united, vapor, yeti y zephyr. Podés verlos en acción acá.\n\n\n\nPodés revisar un ejemplo de una web a partir de un único archivo en https://01-webs-rmarkdown.netlify.app/\nY podés revisar el código fuente acá.\n\n\n\n\n\n\nEjercicio\n\n\n\nDesafío: Publicá un reporte\n\nElegí un archivo .Rmd, puede ser alguno de los que usamos durante el curso a modo de prueba o el reporte de ejemplo sobre Pinguinos.\nRenderizá el archivo a formato html.\nCambiale el nombre para que se llame index.html y publicalo usando Netlify.\nSi querés compartí el link para que otras personas puedan verlo (opcional)."
  },
  {
    "objectID": "08_publicacion.html#muchos-.rmd-o-qmd",
    "href": "08_publicacion.html#muchos-.rmd-o-qmd",
    "title": "Publicando reportes",
    "section": "Muchos .Rmd o qmd",
    "text": "Muchos .Rmd o qmd\nTal vez el contenido que querés mostrar es más complejo y poner todo en un único .Rmd no termina de funcionar. RMarkdown y Quarto también permiten generar una web con estructura compleja (una barra de navegación con botones y menúes entre otras maravillas) a partir de un archivo de configuración y todos los .rmd o .qmd que necesites. El ejemplo de una web de este estilo se encuentra en:\nEl archivo “_site.yml” controla la configuración y pinta de todo el sitio. Es archivo de texto plano con argumentos al estilo YAML. El contenido del archivo para esta web tiene la siguiente pinta:\nnavbar:\n  title: Una web con muchos .Rmd!\n  left:\n  - text: Configuración\n    href: archivo-site.html\n  - text: Contenido\n    menu:\n      - text: El index\n        href: archivo-index.html\n      - text: Un post\n        href: post.html\noutput:\n  html_document:\n    theme: united"
  },
  {
    "objectID": "08_publicacion.html#qué-es-lo-que-hace-cada-parte",
    "href": "08_publicacion.html#qué-es-lo-que-hace-cada-parte",
    "title": "Publicando reportes",
    "section": "¿Qué es lo que hace cada parte?",
    "text": "¿Qué es lo que hace cada parte?\n\nnavbar:... define la barra de navegación que ves ahí arriba. Tiene varias partes, el título, un primer elemento que “Configuración” que lleva a esta misma página y otro elementos que es un menú desplegable desde donde podés acceder a más contenido. Estos elementos tienen un nombre o text y el archivo al que hacen referencia, siempre el html.\noutput:... define opciones globales de salida para no tener que definirlas dentro de cada archivo Rmd. Podés ver las opciones disponibles en la documentación con ?rmarkdown::html_document(). En este caso, define que la apariencia a a ser con el tema “united”.\n\nHay muchas más opciones, por ejemplo:\n\noutput_dir: docs define que el sitio web se va a generar en la carpeta “docs”, adentro de la carpeta del proyecto. Esto cambia el nombre por defecto de la carpeta “_site” que contiene los archivos html y demás archivos necesarios para que el sitio funcione. Esta opción es particularmente útil si se quiere utilizar GitHub Pages que requieren que la carpeta se llame “docs” en vez de “_site”.\n\n\n\n\nLas partes del navbar\n\n\nTener el archivo _site.yaml tiene otra gran ventaja. Ahora RStudio sabe que querés hacer un sitio web y podés generar todo el sitio web directamente yendo a la solapa “Build” y haciendo click en “Build Website” o con el atajo de teclado Ctrl + Shift + B. Esto va a renderizar todos los archivos .Rmd que estén en la raiz del proyecto y va a generar el sitio web en la carpeta especificada en output_dir.\nEl resto se parece mucho a lo que ya vimos. Necesitaremos un archivo index.html que será nuestra página de inicio y luego podremos agregar tantas secciones como queramos.\nPodés revisar un ejemplo de una web construida a partir de varios archivos en: https://02-webs-rmarkdown.netlify.app/\nY el código fuente se encuentra acá."
  },
  {
    "objectID": "08_publicacion.html#palabras-finales-sobre-la-publicación",
    "href": "08_publicacion.html#palabras-finales-sobre-la-publicación",
    "title": "Publicando reportes",
    "section": "Palabras finales sobre la publicación",
    "text": "Palabras finales sobre la publicación\n\nNetlify\nLa opción de arrastrar la carpeta que contiene la web en Netlify puede se útil al principio pero se vuelve trabajoso rápidamente, sería genial que fuera automático. Y se puede.\nNetlify tiene una habilidad muy útil, la primera es que se puede conectar con un repositorio en, por ejemplo, GitHub donde viva la página web.\nLuego de haber publicado algunas webs así me encontré con algunos problemas y sus soluciones:\n\nSi la web está construida solo con R Markdown, Netlify necesita saber que la carpeta “_site” es la que contiene la web, de otra manera va a dar error. Alternativamente se puede cambiar la configuración de la web desde el “_site.yml” para que construya la web una carpeta que se llame “public”.\nQuarto por su lado también genera una carpeta con nombre distinto al que necesitamos donde guarda los archivos html que le dan vida a la web. En cualquier caso, si vemos que la cosa no anda, puede que Netlify no esté encontrando los archivos y necesite que lo indiquemos explícitamente.\n\n\n\nGitHub Pages\nNetlify no es el único servicio que permite hostear una web. Hay muchos otros, por ejemplo GitHub Pages. En este caso si o si necesitamos usar un repositorio donde esté, al menos, los htmls que generan la web.\nUna de las diferencias importantes es que GitHub Pages busca la web en la carpeta raíz o alternativamente en una carpeta dentro del repositorio que debe llamarse “docs”. La buena noticia es usando Quarto o RMarkdown se puede indicar en el archivo de configuración que nombre debe tener la carpeta que contenga el sitio construiido."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "¡Hola!",
    "section": "",
    "text": "Este curso está orientado tanto a personas con experiencia usando R como aquellas re recién comienzan. El foco no estará en correr modelos o utilizar una sintaxis específica para escribir código de R. El objetivo será transformar nuestros análisis usando R en trabajos reproducibles (o al menos desde el punto de vista de R).\nEn particular en estos encuentros haremos foco en la programación literaria, en particular aplicando esta definición al análisis de datos. En otras palabras, la propuesta es escribir código y prosa en el mismo documento y gracias a las herramientas que provee R, generar en documento final en algún formato que necesitemos (por ejemplo pdf o .docx).\nTambién dedicaremos tiempo al cómo compartir nuestro trabajo en un sentido amplio. Por un lado veremos como compartir un proyecto con colegas para que puedan correr el código sin demasiados dolores de cabeza (aunque no entraremos en el uso de git y control de versiones). Por el otro lado, veremos como compartir trabajo terminado, por ejemplo en la forma de una página web (pero de nuevo no necesitaremos aprender nada de html o desarrollo web).\nSi bien “reproducibilidad” puede significar muchas cosas, luego de este curso podrán dar los primer pasos para trabajar de manera más ordenada aprovechando el poder la programación literaria y otras herramientas que ayudan al trabajo cotidiano.\n\n\nDurante el curso usaremos R y Rstudio. Por favor lee las instrucciones que encontrarás aquí para poder participar.\n\n\n\nEl minicurso estará dividido en 3 encuentros de 90 minutos cada uno. Fechas y horario a confirmar.\n\n\n\n\nContenidos\n\n\n\n\nDía 1\n\nIntroducción a la Programación literaria\nUso del paquete RMarkdown y Quarto para reportar anaĺisis de datos\nSintaxis para el manejo de código y prosa\n\n\n\nDía 2\n\nHerramientas hacia la reproducibilidad: projectos y el paquete here\nFlujo de trabajo para generar un informe o reporte reproducible\n\n\n\nDía 3\n\nAutomatización de informes y reportes\nUso de plantillas y otras herramientas de formato\nPublicación de reportes\n\n\n\n\nPao Corrales\n Paola Corrales. Es estudiante de doctorado en la Universidad de Buenos Aires. Estudia ciencias de la atmósfera aplicando técnicas de asimilación de datos para mejorar los pronósticos a corto plazo de eventos severos en Argentina. Es trainer e instructora de The Carpentries e instructora certificada de RStudio. También ha contribuido a proyectos de traducción de materiales de The Carpentries y al libro Teaching Tech Together. Forma parte de Expedición Ciencia, una organización sin ánimo de lucro con sede en Argentina, donde dirige proyectos educativos como campamentos y talleres de ciencia para estudiantes y profesores de ciencias de primaria y secundaria. Es profesora de la Licenciatura y la diplomatura en Ciencias de Datos de la Universidad Guillermo Brown. Es cofundadora de MetaDocencia. También desarrolla materiales de licencia abierta para enseñar y aprender R desde cero.\npaobcorrales.github.io | @paobcorrales\n\n\n Todos los materiales de este curso en encuentra bajo la licencia Creative Commons Attribution-ShareAlike 4.0 International License.\nEstán inspirados y basados en los siguientes recursos:\n\nde Excel a R por Paola Corrales y Elio Campitelli\nQuarto"
  },
  {
    "objectID": "preparacion.html",
    "href": "preparacion.html",
    "title": "Antes de comenzar",
    "section": "",
    "text": "Para participar en el curso necesitaras una versión actualizada de R (>4.0) y RStudio (2022.07.01). Versiones previas podrian no funcionar ya que entre otras cosas usaremos una nueva herramienta que viene incluida en las últimas versiones de RStudio.\nSi nunca trabajaste con RMarkdown es posible que necesites instalar algunos paquetes. La manera mas directa de hacer esto es:\n\nAbre RStudio\nHaz click en Archivo -> Nuevo Archivo -> R Markdown. Haz clic en “Ok” para crear un nuevo archivo.\nRStudio te pedirá permiso para instalar varios paquetes. Adelante, hazlo.\nPuedes eliminar el archivo que acabas de crear.\nListo!\n\n\n\nSi por alguna razón no podés trabajar con una instalación local, una alternativa es usar RStudio Cloud. Si quieres usar RStudio Cloud necesitarás una cuenta gratuita. Ingresa a rstudio.cloud/ y sigue las instrucciones para registrarte. Ten en cuenta que la cuenta gratuita tiene un límite de uso de 25 horas por mes, te recomendamos no usar todas las horas antes del taller."
  },
  {
    "objectID": "preparacion.html#opcional",
    "href": "preparacion.html#opcional",
    "title": "Antes de comenzar",
    "section": "Opcional",
    "text": "Opcional\nDurante el curso tendrás la posibilidad de hacer ejercicios y poner en práctica las herramientas. Para aprovechar aún más la experiencia, podés traer un script que realicé algún análisis de datos y genere alguna figura o tabla (mejor si no es muy largo y si el código no demora en correr) junto con los datos propiamente dichos.\nEl desafío será convertir ese script en un proyecto y producir un documento con los resultados listos para compartir."
  },
  {
    "objectID": "quarto_reporte_ejemplo.html",
    "href": "quarto_reporte_ejemplo.html",
    "title": "Pingüinos Papúa con Quarto",
    "section": "",
    "text": "Los datos de Pingüinos de Palmer fueron recogidos y puestos a disposición por la Dra. Kristen Gorman y la Estación Palmer en la Antártida, LTER, que es parte de la Red de Investigación Ecológica a Largo Plazo. El conjunto de datos incluye varias características de los pingüinos Adelia, Barbijo y Papúa.\n\n\n\nResumen de los pingüinos en el dataset por especie.\n\n\nEspecie\nCantidad\nMasa corporal media\n\n\n\n\nAdelia\n152\n3.70\n\n\nBarbijo\n68\n3.73\n\n\nPapúa\n124\n5.08\n\n\n\n\n\n\n\nEn esta sección centramos el análisis en la especie papúa. La longitud del pico está correlacionada positivamente con el alto del pico, los pingüinos con picos más largos suelen tener picos más altos también.\n\n\n\n\n\nLas hembras y los machos de los pingüinos tienen una masa corporal diferente. Los pingüinos macho suelen ser más grandes que las hembras."
  },
  {
    "objectID": "rmarkdown_reporte_ejemplo.html",
    "href": "rmarkdown_reporte_ejemplo.html",
    "title": "Pingüinos Papúa con RMarkdown",
    "section": "",
    "text": "Los datos de Pingüinos de Palmer fueron recogidos y puestos a disposición por la Dra. Kristen Gorman y la Estación Palmer en la Antártida, LTER, que es parte de la Red de Investigación Ecológica a Largo Plazo. El conjunto de datos incluye varias características de los pingüinos Adelia, Barbijo y Papúa.\n\n\n\nResumen de los pingüinos en el dataset por especie.\n\n\nEspecie\nCantidad\nMasa corporal media\n\n\n\n\nAdelia\n152\n3.70\n\n\nBarbijo\n68\n3.73\n\n\nPapúa\n124\n5.08\n\n\n\n\n\n\n\nEn esta sección centramos el análisis en la especie papúa. La longitud del pico está correlacionada positivamente con el alto del pico, los pingüinos con picos más largos suelen tener picos más altos también.\n\n\n\n\n\nRelación entre el largo y el alto del pico en mm.\n\n\n\n\nLas hembras y los machos de los pingüinos tienen una masa corporal diferente. Los pingüinos macho suelen ser más grandes que las hembras.\n\n\n\n\n\nDistribución de la masa corporal de los pinggüinos según su sexo."
  }
]